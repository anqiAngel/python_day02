import hashlib

# 字典(dict)和列表类似也是用来存储对象的容器
# 字典属于一种新的数据结构，称为映射(mapping)
# 列表存储数据的性能很好,但查询数据的性能很差
# 在字典中每一个元素都有唯一的名字,通过这个唯一的名字可以快速的查找到指定的元素
# 字典查询数据效率是非常快的
# 字典可以保存多个对象,每个对象都有唯一的名字,称为键。存储的对象称为值。
# 所以字典也称为键值对的结构
# 每个字典中都可以有多个键值对,每个键值对称为一项 (item)
# 字典创建 d = {}大括号
# 字典的值是任意的对象
# 字典的键可以是任意的不可变对象,一般都是字符串
# 字典的键是不能重复的 如果有重复解释器会用后边的替换前面的
# d = {'name': '史安琪', 'age': 18}
# print(d)
# print(d['name'])

# 字典的使用
# 第二种创建字典的方法
# 每一个参数都是键值对,参数名是键,参数是值(这种创建方法创建的字典一般键为字符串)
# 以关键字参数方式创建字典dict
# d = dict(name='史安琪', age=22)
# 创建方法三 将双值子序列转化为字典
my_list = [('name', '史安琪'), ('age', 22)]
d = dict(my_list)
# len()获取dict字典中键值对的个数
# print(len(d))
# in和 not in 检查指定的键是否在字典中
# print('name' in d)
# print(d)
# d.get(key)获取字典中的指定值 不存在返回 None
# d.get(key,default) 如果不存在返回 default
# print(d.get('name'))
# 修改字典
# 用键值修改,没有加上
# d['name'] = 'shianqi'
# d['address'] = '辽工'
# print(d)

# 修改2
# 存在返回原值,不存在修改成default返回default
# print(d.setdefault('name', '猪八戒'))

# update(dict)将一个字典添加到另一个列表
# 如果有重复的新的会替换前面的
d = {'a': 1, 'b': 2, 'c': 3}
d1 = {'d': 4, 'e': 5, 'f': 6}
d.update(d1)
d['a'] = 8
print(d)
print(len(d))
