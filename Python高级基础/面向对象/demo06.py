import socket


# 继承
# 定义一个类 Animal(动物)
# 这个类中需要两个方法
class Animal:
    def __init__(self, name):
        self._name = name

    def run(self):
        print('跑')

    def sleep(self):
        print('睡觉')

    # def bark(self):
    #     print('动物叫')


# 定义一个类 Dog(狗)
# 这个类中需要三个方法:run() sleep() bark()
# 有一个类,能够实现我们需要的大部分功能,但是不能实现线全部功能
# 如何让这个类来实现全部的功能呢?
# 1.直接修改这个类,在这个类中添加我们需要的功能
# 修改起来会比较麻烦,并且会违反OCP原则
# 2.直接创建一个新的类
# 创建一个新的类比较麻烦,并且需要
# 3.直接从Animal类中继承它的属性方法
# 通过继承我们可以使一个类获取到其他类中的属性和方法
# 可以在类名后面的括号内
# 子类(衍生类)可以直接继承父类中的所有的属性和方法

class Dog(Animal):
    def __init__(self, name, age):
        # 希望可以直接调用父类的__init__来初始化父类中的定义的属性
        # super()可以用来获取当前类的父类,并且通过super()返回对象调用父类方法时,不需要传递self 获取父类对象
        super().__init__(name)
        # Animal.__init__(self, name)
        self.name = name
        self.age = age

    def run(self):
        print('狗跑~~')

    def bark(self):
        print('汪汪汪~~~')


# 通过继承可以直接让子类获取到父类的方法或属性
d = Dog()
d.run()
d.sleep()
d.bark()
print(isinstance(d, Animal))
# 在创建类时,如果省略了父类,则默认父类为object
# object是所有类的父类
print(issubclass(Dog, Animal))
print(issubclass(Animal, object))
# isinstance()用来检查一个对象是否是一个类的实例
# 如果这个类是这个对象的父类,也会返回True
# 如果在子类中如果有和父类同名的方法,则通过子类实例调用该方法时,则会调用子类中的方法而不是父类的方法
# 这个特点我们称为方法的重写(覆盖,override)
# 当我们调用对象的方法时,会优先去当前对象中寻找是否具有该方法,如果有则直接调用
# 如果没有,则去当前对象的父类中去寻找 还没有,则去父类的父类中去寻找,以此类推,直到找到object,如果依然没有找到,则报错
# 类中的所有子类方法都会被子类继承,包括特殊方法(魔术方法),也可以重写特殊方法(魔术方法)
# 类名.__bases__ 这个属性可以用来获取当前类的所有父类 返回一个元组
# 在Python中是支持多重继承的,也就是我们可以为一个类同时指定多个父类
# 可以在类名的()后边添加多个类,来实现多继承
# 多重继承,会是子类同时拥有多个父类,并且会获取到所有父类中的方法
# 在开发中没有特殊的情况,应该尽量避免使用多重继承,因为多重继承会让我们的代码过于复杂
# 如果多个父类中有同名的方法,则会先在第一个父类中寻找,然后找第二个父类,以此类推
# 前面的覆盖后面的
