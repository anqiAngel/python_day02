import socket


# 定义一个正常的类
# 定义一个人类
class Person(object):
    # 在类的代码块中,我们可以定义一变量和函数
    # 在类中我们所定义的变量,将会成为所有该类实例的公共属性
    # 所有该类的实例都可以访问这些变量
    name = '孙悟空'

    # 在类中也可以定义的函数。在类中定义的函数我们称之为方法
    # 这些方法可以通过该类的实例来访问
    def hello(self):
        print('Hello')


p1 = Person()
print(p1.name)
# 调用方法 对象.方法名()
# 方法调用和调用函数的区别
# 如果是函数调用,则调用时传递几个参数,就会有几个形参
# 但是如果是方法调用,默认传递一个参数,所以方法中至少要定义一个形参
# 在类的代码块中,我们可以定义变量和函数 变量会成为该类实例的公共属性,所有的该类实例都可以通过 类名.属性名来访问
# 函数会成为该类实例的公共方法,所有的该类实例都可以通过 对象.方法名()的形式调用该类中定义的方法
# 注意: 方法调用时,第一个参数由解释器自动传递,所以定义方法时,至少要定义一个形成
# 类中定义的属性、方法都是公共的,任何该类的属性都可以进行访问

p1.hello()
p2 = Person()

# 属性和方法查找的流程 当我们调用一个属性时,解析器会先在当前对象中寻找是否含有该属性
# 如果有,则直接返回当前的对象的属性值
# 如果没有,则去当前对象的类对象中去寻找,如果有则返回类对象的属性值 如果都没有则报错

# 类对象和实例对象都可以保存属性和方法
# 如果这个属性或方法是所有实例对象共享的,则应该将其保存到类对象中
# 如果这个属性或方法是某个实例对象独有的,则应该将其保存到实例对象中
# 一般情况下属性保存到实例对象中 方法保存到类对象中

p1.name = '猪八戒'
p2.name = '史安琪'
print(p1.name)
# 删除的是实例对象中的属性
del p2.name
print(p2.name)

# 调用方法传入的第一个参数就是对象本身
# p1调的就是p1 p2调的就是p2


